// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iost-official/Go-IOS-Protocol/core/new_tx (interfaces: TxDB)

// Package core_mock is a generated GoMock package.
package core_mock

import (
	gomock "github.com/golang/mock/gomock"
	new_tx "github.com/iost-official/Go-IOS-Protocol/core/new_tx"
	reflect "reflect"
)

// MockTxDB is a mock of TxDB interface
type MockTxDB struct {
	ctrl     *gomock.Controller
	recorder *MockTxDBMockRecorder
}

// MockTxDBMockRecorder is the mock recorder for MockTxDB
type MockTxDBMockRecorder struct {
	mock *MockTxDB
}

// NewMockTxDB creates a new mock instance
func NewMockTxDB(ctrl *gomock.Controller) *MockTxDB {
	mock := &MockTxDB{ctrl: ctrl}
	mock.recorder = &MockTxDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxDB) EXPECT() *MockTxDBMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockTxDB) Get(arg0 []byte) (*new_tx.Tx, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*new_tx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockTxDBMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTxDB)(nil).Get), arg0)
}

// Has mocks base method
func (m *MockTxDB) Has(arg0 *new_tx.Tx) (bool, error) {
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has
func (mr *MockTxDBMockRecorder) Has(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockTxDB)(nil).Has), arg0)
}

// Push mocks base method
func (m *MockTxDB) Push(arg0 []*new_tx.Tx) error {
	ret := m.ctrl.Call(m, "Push", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockTxDBMockRecorder) Push(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockTxDB)(nil).Push), arg0)
}
