// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/apis.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import block "github.com/iost-official/Go-IOS-Protocol/core/block"
import event "github.com/iost-official/Go-IOS-Protocol/core/event"
import tx "github.com/iost-official/Go-IOS-Protocol/core/tx"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VoidReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoidReq) Reset()         { *m = VoidReq{} }
func (m *VoidReq) String() string { return proto.CompactTextString(m) }
func (*VoidReq) ProtoMessage()    {}
func (*VoidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{0}
}
func (m *VoidReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoidReq.Unmarshal(m, b)
}
func (m *VoidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoidReq.Marshal(b, m, deterministic)
}
func (dst *VoidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoidReq.Merge(dst, src)
}
func (m *VoidReq) XXX_Size() int {
	return xxx_messageInfo_VoidReq.Size(m)
}
func (m *VoidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VoidReq.DiscardUnknown(m)
}

var xxx_messageInfo_VoidReq proto.InternalMessageInfo

type HashReq struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashReq) Reset()         { *m = HashReq{} }
func (m *HashReq) String() string { return proto.CompactTextString(m) }
func (*HashReq) ProtoMessage()    {}
func (*HashReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{1}
}
func (m *HashReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashReq.Unmarshal(m, b)
}
func (m *HashReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashReq.Marshal(b, m, deterministic)
}
func (dst *HashReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashReq.Merge(dst, src)
}
func (m *HashReq) XXX_Size() int {
	return xxx_messageInfo_HashReq.Size(m)
}
func (m *HashReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HashReq.DiscardUnknown(m)
}

var xxx_messageInfo_HashReq proto.InternalMessageInfo

func (m *HashReq) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// complete means return the whole block or just blockhead+txhash_list
type BlockByHashReq struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Complete             bool     `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockByHashReq) Reset()         { *m = BlockByHashReq{} }
func (m *BlockByHashReq) String() string { return proto.CompactTextString(m) }
func (*BlockByHashReq) ProtoMessage()    {}
func (*BlockByHashReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{2}
}
func (m *BlockByHashReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockByHashReq.Unmarshal(m, b)
}
func (m *BlockByHashReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockByHashReq.Marshal(b, m, deterministic)
}
func (dst *BlockByHashReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockByHashReq.Merge(dst, src)
}
func (m *BlockByHashReq) XXX_Size() int {
	return xxx_messageInfo_BlockByHashReq.Size(m)
}
func (m *BlockByHashReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockByHashReq.DiscardUnknown(m)
}

var xxx_messageInfo_BlockByHashReq proto.InternalMessageInfo

func (m *BlockByHashReq) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockByHashReq) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

type BlockByNumReq struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Complete             bool     `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockByNumReq) Reset()         { *m = BlockByNumReq{} }
func (m *BlockByNumReq) String() string { return proto.CompactTextString(m) }
func (*BlockByNumReq) ProtoMessage()    {}
func (*BlockByNumReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{3}
}
func (m *BlockByNumReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockByNumReq.Unmarshal(m, b)
}
func (m *BlockByNumReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockByNumReq.Marshal(b, m, deterministic)
}
func (dst *BlockByNumReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockByNumReq.Merge(dst, src)
}
func (m *BlockByNumReq) XXX_Size() int {
	return xxx_messageInfo_BlockByNumReq.Size(m)
}
func (m *BlockByNumReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockByNumReq.DiscardUnknown(m)
}

var xxx_messageInfo_BlockByNumReq proto.InternalMessageInfo

func (m *BlockByNumReq) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *BlockByNumReq) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

type GetBalanceReq struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBalanceReq) Reset()         { *m = GetBalanceReq{} }
func (m *GetBalanceReq) String() string { return proto.CompactTextString(m) }
func (*GetBalanceReq) ProtoMessage()    {}
func (*GetBalanceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{4}
}
func (m *GetBalanceReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBalanceReq.Unmarshal(m, b)
}
func (m *GetBalanceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBalanceReq.Marshal(b, m, deterministic)
}
func (dst *GetBalanceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBalanceReq.Merge(dst, src)
}
func (m *GetBalanceReq) XXX_Size() int {
	return xxx_messageInfo_GetBalanceReq.Size(m)
}
func (m *GetBalanceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBalanceReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBalanceReq proto.InternalMessageInfo

func (m *GetBalanceReq) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetStateReq struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateReq) Reset()         { *m = GetStateReq{} }
func (m *GetStateReq) String() string { return proto.CompactTextString(m) }
func (*GetStateReq) ProtoMessage()    {}
func (*GetStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{5}
}
func (m *GetStateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStateReq.Unmarshal(m, b)
}
func (m *GetStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStateReq.Marshal(b, m, deterministic)
}
func (dst *GetStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateReq.Merge(dst, src)
}
func (m *GetStateReq) XXX_Size() int {
	return xxx_messageInfo_GetStateReq.Size(m)
}
func (m *GetStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateReq proto.InternalMessageInfo

func (m *GetStateReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// the rawdata of a tx
type RawTxReq struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawTxReq) Reset()         { *m = RawTxReq{} }
func (m *RawTxReq) String() string { return proto.CompactTextString(m) }
func (*RawTxReq) ProtoMessage()    {}
func (*RawTxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{6}
}
func (m *RawTxReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawTxReq.Unmarshal(m, b)
}
func (m *RawTxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawTxReq.Marshal(b, m, deterministic)
}
func (dst *RawTxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTxReq.Merge(dst, src)
}
func (m *RawTxReq) XXX_Size() int {
	return xxx_messageInfo_RawTxReq.Size(m)
}
func (m *RawTxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTxReq.DiscardUnknown(m)
}

var xxx_messageInfo_RawTxReq proto.InternalMessageInfo

func (m *RawTxReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubscribeReq struct {
	Topics               []event.Event_Topic `protobuf:"varint,1,rep,packed,name=topics,proto3,enum=event.Event_Topic" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SubscribeReq) Reset()         { *m = SubscribeReq{} }
func (m *SubscribeReq) String() string { return proto.CompactTextString(m) }
func (*SubscribeReq) ProtoMessage()    {}
func (*SubscribeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{7}
}
func (m *SubscribeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeReq.Unmarshal(m, b)
}
func (m *SubscribeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeReq.Marshal(b, m, deterministic)
}
func (dst *SubscribeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeReq.Merge(dst, src)
}
func (m *SubscribeReq) XXX_Size() int {
	return xxx_messageInfo_SubscribeReq.Size(m)
}
func (m *SubscribeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeReq proto.InternalMessageInfo

func (m *SubscribeReq) GetTopics() []event.Event_Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

type HeightRes struct {
	Height               int64    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeightRes) Reset()         { *m = HeightRes{} }
func (m *HeightRes) String() string { return proto.CompactTextString(m) }
func (*HeightRes) ProtoMessage()    {}
func (*HeightRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{8}
}
func (m *HeightRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeightRes.Unmarshal(m, b)
}
func (m *HeightRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeightRes.Marshal(b, m, deterministic)
}
func (dst *HeightRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeightRes.Merge(dst, src)
}
func (m *HeightRes) XXX_Size() int {
	return xxx_messageInfo_HeightRes.Size(m)
}
func (m *HeightRes) XXX_DiscardUnknown() {
	xxx_messageInfo_HeightRes.DiscardUnknown(m)
}

var xxx_messageInfo_HeightRes proto.InternalMessageInfo

func (m *HeightRes) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetBalanceRes struct {
	Balance              int64    `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBalanceRes) Reset()         { *m = GetBalanceRes{} }
func (m *GetBalanceRes) String() string { return proto.CompactTextString(m) }
func (*GetBalanceRes) ProtoMessage()    {}
func (*GetBalanceRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{9}
}
func (m *GetBalanceRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBalanceRes.Unmarshal(m, b)
}
func (m *GetBalanceRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBalanceRes.Marshal(b, m, deterministic)
}
func (dst *GetBalanceRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBalanceRes.Merge(dst, src)
}
func (m *GetBalanceRes) XXX_Size() int {
	return xxx_messageInfo_GetBalanceRes.Size(m)
}
func (m *GetBalanceRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBalanceRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetBalanceRes proto.InternalMessageInfo

func (m *GetBalanceRes) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type GetStateRes struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateRes) Reset()         { *m = GetStateRes{} }
func (m *GetStateRes) String() string { return proto.CompactTextString(m) }
func (*GetStateRes) ProtoMessage()    {}
func (*GetStateRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{10}
}
func (m *GetStateRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStateRes.Unmarshal(m, b)
}
func (m *GetStateRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStateRes.Marshal(b, m, deterministic)
}
func (dst *GetStateRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateRes.Merge(dst, src)
}
func (m *GetStateRes) XXX_Size() int {
	return xxx_messageInfo_GetStateRes.Size(m)
}
func (m *GetStateRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateRes proto.InternalMessageInfo

func (m *GetStateRes) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SendRawTxRes struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRawTxRes) Reset()         { *m = SendRawTxRes{} }
func (m *SendRawTxRes) String() string { return proto.CompactTextString(m) }
func (*SendRawTxRes) ProtoMessage()    {}
func (*SendRawTxRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{11}
}
func (m *SendRawTxRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendRawTxRes.Unmarshal(m, b)
}
func (m *SendRawTxRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendRawTxRes.Marshal(b, m, deterministic)
}
func (dst *SendRawTxRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRawTxRes.Merge(dst, src)
}
func (m *SendRawTxRes) XXX_Size() int {
	return xxx_messageInfo_SendRawTxRes.Size(m)
}
func (m *SendRawTxRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRawTxRes.DiscardUnknown(m)
}

var xxx_messageInfo_SendRawTxRes proto.InternalMessageInfo

func (m *SendRawTxRes) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type GasRes struct {
	Gas                  uint64   `protobuf:"varint,1,opt,name=gas,proto3" json:"gas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GasRes) Reset()         { *m = GasRes{} }
func (m *GasRes) String() string { return proto.CompactTextString(m) }
func (*GasRes) ProtoMessage()    {}
func (*GasRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{12}
}
func (m *GasRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GasRes.Unmarshal(m, b)
}
func (m *GasRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GasRes.Marshal(b, m, deterministic)
}
func (dst *GasRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasRes.Merge(dst, src)
}
func (m *GasRes) XXX_Size() int {
	return xxx_messageInfo_GasRes.Size(m)
}
func (m *GasRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GasRes.DiscardUnknown(m)
}

var xxx_messageInfo_GasRes proto.InternalMessageInfo

func (m *GasRes) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

type BlockInfo struct {
	Head                 *block.BlockHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Txs                  []*tx.TxRaw      `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
	Txhash               [][]byte         `protobuf:"bytes,3,rep,name=txhash,proto3" json:"txhash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BlockInfo) Reset()         { *m = BlockInfo{} }
func (m *BlockInfo) String() string { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()    {}
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{13}
}
func (m *BlockInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockInfo.Unmarshal(m, b)
}
func (m *BlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockInfo.Marshal(b, m, deterministic)
}
func (dst *BlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInfo.Merge(dst, src)
}
func (m *BlockInfo) XXX_Size() int {
	return xxx_messageInfo_BlockInfo.Size(m)
}
func (m *BlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInfo proto.InternalMessageInfo

func (m *BlockInfo) GetHead() *block.BlockHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *BlockInfo) GetTxs() []*tx.TxRaw {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *BlockInfo) GetTxhash() [][]byte {
	if m != nil {
		return m.Txhash
	}
	return nil
}

type SubscribeRes struct {
	Ev                   *event.Event `protobuf:"bytes,1,opt,name=ev,proto3" json:"ev,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SubscribeRes) Reset()         { *m = SubscribeRes{} }
func (m *SubscribeRes) String() string { return proto.CompactTextString(m) }
func (*SubscribeRes) ProtoMessage()    {}
func (*SubscribeRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_apis_b7f664d6a651ac7b, []int{14}
}
func (m *SubscribeRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRes.Unmarshal(m, b)
}
func (m *SubscribeRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRes.Marshal(b, m, deterministic)
}
func (dst *SubscribeRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRes.Merge(dst, src)
}
func (m *SubscribeRes) XXX_Size() int {
	return xxx_messageInfo_SubscribeRes.Size(m)
}
func (m *SubscribeRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRes.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRes proto.InternalMessageInfo

func (m *SubscribeRes) GetEv() *event.Event {
	if m != nil {
		return m.Ev
	}
	return nil
}

func init() {
	proto.RegisterType((*VoidReq)(nil), "rpc.VoidReq")
	proto.RegisterType((*HashReq)(nil), "rpc.HashReq")
	proto.RegisterType((*BlockByHashReq)(nil), "rpc.BlockByHashReq")
	proto.RegisterType((*BlockByNumReq)(nil), "rpc.BlockByNumReq")
	proto.RegisterType((*GetBalanceReq)(nil), "rpc.GetBalanceReq")
	proto.RegisterType((*GetStateReq)(nil), "rpc.GetStateReq")
	proto.RegisterType((*RawTxReq)(nil), "rpc.RawTxReq")
	proto.RegisterType((*SubscribeReq)(nil), "rpc.SubscribeReq")
	proto.RegisterType((*HeightRes)(nil), "rpc.HeightRes")
	proto.RegisterType((*GetBalanceRes)(nil), "rpc.GetBalanceRes")
	proto.RegisterType((*GetStateRes)(nil), "rpc.GetStateRes")
	proto.RegisterType((*SendRawTxRes)(nil), "rpc.SendRawTxRes")
	proto.RegisterType((*GasRes)(nil), "rpc.GasRes")
	proto.RegisterType((*BlockInfo)(nil), "rpc.BlockInfo")
	proto.RegisterType((*SubscribeRes)(nil), "rpc.SubscribeRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApisClient is the client API for Apis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApisClient interface {
	// get the current height of the blockchain
	GetHeight(ctx context.Context, in *VoidReq, opts ...grpc.CallOption) (*HeightRes, error)
	// get the tx by hash
	GetTxByHash(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*tx.TxRaw, error)
	// get the block by hash
	GetBlockByHash(ctx context.Context, in *BlockByHashReq, opts ...grpc.CallOption) (*BlockInfo, error)
	// get the block by number
	GetBlockByNum(ctx context.Context, in *BlockByNumReq, opts ...grpc.CallOption) (*BlockInfo, error)
	// get the balance of some account by account ID
	GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceRes, error)
	// get the value of the corresponding key in stateDB
	GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateRes, error)
	// receive encoded tx
	SendRawTx(ctx context.Context, in *RawTxReq, opts ...grpc.CallOption) (*SendRawTxRes, error)
	// not supported yet
	EstimateGas(ctx context.Context, in *RawTxReq, opts ...grpc.CallOption) (*GasRes, error)
	// subscribe an event
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Apis_SubscribeClient, error)
}

type apisClient struct {
	cc *grpc.ClientConn
}

func NewApisClient(cc *grpc.ClientConn) ApisClient {
	return &apisClient{cc}
}

func (c *apisClient) GetHeight(ctx context.Context, in *VoidReq, opts ...grpc.CallOption) (*HeightRes, error) {
	out := new(HeightRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetTxByHash(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*tx.TxRaw, error) {
	out := new(tx.TxRaw)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetTxByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetBlockByHash(ctx context.Context, in *BlockByHashReq, opts ...grpc.CallOption) (*BlockInfo, error) {
	out := new(BlockInfo)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetBlockByNum(ctx context.Context, in *BlockByNumReq, opts ...grpc.CallOption) (*BlockInfo, error) {
	out := new(BlockInfo)
	err := c.cc.Invoke(ctx, "/rpc.Apis/getBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceRes, error) {
	out := new(GetBalanceRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateRes, error) {
	out := new(GetStateRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) SendRawTx(ctx context.Context, in *RawTxReq, opts ...grpc.CallOption) (*SendRawTxRes, error) {
	out := new(SendRawTxRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/SendRawTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) EstimateGas(ctx context.Context, in *RawTxReq, opts ...grpc.CallOption) (*GasRes, error) {
	out := new(GasRes)
	err := c.cc.Invoke(ctx, "/rpc.Apis/EstimateGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apisClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Apis_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Apis_serviceDesc.Streams[0], "/rpc.Apis/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &apisSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Apis_SubscribeClient interface {
	Recv() (*SubscribeRes, error)
	grpc.ClientStream
}

type apisSubscribeClient struct {
	grpc.ClientStream
}

func (x *apisSubscribeClient) Recv() (*SubscribeRes, error) {
	m := new(SubscribeRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApisServer is the server API for Apis service.
type ApisServer interface {
	// get the current height of the blockchain
	GetHeight(context.Context, *VoidReq) (*HeightRes, error)
	// get the tx by hash
	GetTxByHash(context.Context, *HashReq) (*tx.TxRaw, error)
	// get the block by hash
	GetBlockByHash(context.Context, *BlockByHashReq) (*BlockInfo, error)
	// get the block by number
	GetBlockByNum(context.Context, *BlockByNumReq) (*BlockInfo, error)
	// get the balance of some account by account ID
	GetBalance(context.Context, *GetBalanceReq) (*GetBalanceRes, error)
	// get the value of the corresponding key in stateDB
	GetState(context.Context, *GetStateReq) (*GetStateRes, error)
	// receive encoded tx
	SendRawTx(context.Context, *RawTxReq) (*SendRawTxRes, error)
	// not supported yet
	EstimateGas(context.Context, *RawTxReq) (*GasRes, error)
	// subscribe an event
	Subscribe(*SubscribeReq, Apis_SubscribeServer) error
}

func RegisterApisServer(s *grpc.Server, srv ApisServer) {
	s.RegisterService(&_Apis_serviceDesc, srv)
}

func _Apis_GetHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetHeight(ctx, req.(*VoidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetTxByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetTxByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetTxByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetTxByHash(ctx, req.(*HashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockByHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetBlockByHash(ctx, req.(*BlockByHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockByNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetBlockByNum(ctx, req.(*BlockByNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetBalance(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).GetState(ctx, req.(*GetStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_SendRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).SendRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/SendRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).SendRawTx(ctx, req.(*RawTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApisServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Apis/EstimateGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApisServer).EstimateGas(ctx, req.(*RawTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apis_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApisServer).Subscribe(m, &apisSubscribeServer{stream})
}

type Apis_SubscribeServer interface {
	Send(*SubscribeRes) error
	grpc.ServerStream
}

type apisSubscribeServer struct {
	grpc.ServerStream
}

func (x *apisSubscribeServer) Send(m *SubscribeRes) error {
	return x.ServerStream.SendMsg(m)
}

var _Apis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Apis",
	HandlerType: (*ApisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeight",
			Handler:    _Apis_GetHeight_Handler,
		},
		{
			MethodName: "GetTxByHash",
			Handler:    _Apis_GetTxByHash_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _Apis_GetBlockByHash_Handler,
		},
		{
			MethodName: "getBlockByNum",
			Handler:    _Apis_GetBlockByNum_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Apis_GetBalance_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Apis_GetState_Handler,
		},
		{
			MethodName: "SendRawTx",
			Handler:    _Apis_SendRawTx_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _Apis_EstimateGas_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Apis_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/apis.proto",
}

func init() { proto.RegisterFile("rpc/apis.proto", fileDescriptor_apis_b7f664d6a651ac7b) }

var fileDescriptor_apis_b7f664d6a651ac7b = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcb, 0x6e, 0xda, 0x4c,
	0x14, 0xc7, 0x05, 0x26, 0x04, 0x1f, 0x2e, 0x1f, 0x99, 0x44, 0x09, 0x9f, 0x9b, 0x34, 0x68, 0xd2,
	0x05, 0x8d, 0x1a, 0xbb, 0xa5, 0xab, 0x46, 0xaa, 0xda, 0xd2, 0x44, 0x84, 0x45, 0x93, 0xd6, 0xa0,
	0xee, 0x07, 0x33, 0x18, 0x2b, 0xe0, 0x71, 0x98, 0x81, 0x38, 0xdb, 0xbe, 0x42, 0x9f, 0xa4, 0xcf,
	0xd2, 0x57, 0xe8, 0x83, 0x54, 0x33, 0x1e, 0x73, 0x49, 0xaa, 0x48, 0xed, 0xc6, 0x9a, 0x33, 0x67,
	0xce, 0x8f, 0x73, 0xf9, 0x1f, 0xa0, 0x32, 0x8d, 0x3c, 0x87, 0x44, 0x01, 0xb7, 0xa3, 0x29, 0x13,
	0x0c, 0x19, 0xd3, 0xc8, 0xb3, 0xde, 0xf8, 0x81, 0x18, 0xcd, 0xfa, 0xb6, 0xc7, 0x26, 0x4e, 0xc0,
	0xb8, 0x38, 0x61, 0xc3, 0x61, 0xe0, 0x05, 0x64, 0xec, 0xb4, 0xd9, 0x49, 0xe7, 0xaa, 0x7b, 0xf2,
	0x59, 0xbe, 0xf5, 0xd8, 0xd8, 0xf1, 0xd8, 0x94, 0x3a, 0x22, 0x76, 0x44, 0x9c, 0xc4, 0x5b, 0xef,
	0xfe, 0x2e, 0xb4, 0x3f, 0x66, 0xde, 0x75, 0xf2, 0xfd, 0x37, 0x00, 0x9d, 0xd3, 0x50, 0x24, 0x5f,
	0x0d, 0xd8, 0xf7, 0x19, 0xf3, 0xc7, 0x54, 0x16, 0xe5, 0x90, 0x30, 0x64, 0x82, 0x88, 0x80, 0x85,
	0xba, 0x3e, 0x6c, 0xc2, 0xe6, 0x57, 0x16, 0x0c, 0x5c, 0x7a, 0x83, 0x0f, 0x60, 0xf3, 0x82, 0xf0,
	0x91, 0x4b, 0x6f, 0x10, 0x82, 0xdc, 0x88, 0xf0, 0x51, 0x2d, 0x53, 0xcf, 0x34, 0x4a, 0xae, 0x3a,
	0xe3, 0xf7, 0x50, 0x69, 0xc9, 0xbc, 0x5a, 0x77, 0x8f, 0xbc, 0x42, 0x16, 0x14, 0x3c, 0x36, 0x89,
	0xc6, 0x54, 0xd0, 0x5a, 0xb6, 0x9e, 0x69, 0x14, 0xdc, 0x85, 0x8d, 0xdf, 0x42, 0x59, 0x13, 0x2e,
	0x67, 0x13, 0x09, 0xa8, 0x82, 0x11, 0xce, 0x26, 0x2a, 0xde, 0x70, 0xe5, 0xf1, 0xd1, 0xf0, 0x43,
	0x28, 0xb7, 0xa9, 0x68, 0x91, 0x31, 0x09, 0x3d, 0x2a, 0xc3, 0x2b, 0x90, 0xed, 0x9c, 0xa9, 0x68,
	0xd3, 0xcd, 0x76, 0xce, 0xf0, 0x21, 0x14, 0xdb, 0x54, 0x74, 0x05, 0x11, 0x54, 0xd3, 0xaf, 0xe9,
	0x9d, 0xf6, 0xcb, 0x23, 0x7e, 0x0a, 0x05, 0x97, 0xdc, 0xf6, 0x62, 0x9d, 0xfc, 0x80, 0x08, 0x92,
	0x26, 0x2f, 0xcf, 0xf8, 0x14, 0x4a, 0xdd, 0x59, 0x9f, 0x7b, 0xd3, 0xa0, 0xaf, 0x08, 0xc7, 0x90,
	0x17, 0x2c, 0x0a, 0x3c, 0x5e, 0xcb, 0xd4, 0x8d, 0x46, 0xa5, 0x89, 0xec, 0xa4, 0xb1, 0xe7, 0xea,
	0xdb, 0x93, 0x2e, 0x57, 0xbf, 0xc0, 0x47, 0x60, 0x5e, 0xd0, 0xc0, 0x1f, 0x09, 0x97, 0x72, 0xb4,
	0x0b, 0xf9, 0x91, 0x32, 0x74, 0x6d, 0xda, 0xc2, 0xcf, 0xd7, 0x4b, 0xe0, 0xa8, 0x06, 0x9b, 0xfd,
	0xc4, 0xd2, 0x2f, 0x53, 0x13, 0x1f, 0xad, 0x16, 0xc3, 0xd1, 0x0e, 0x6c, 0xcc, 0xc9, 0x78, 0x46,
	0x75, 0x39, 0x89, 0x81, 0x31, 0x94, 0xba, 0x34, 0x1c, 0xe8, 0xa2, 0xf8, 0x1f, 0xe7, 0x66, 0x41,
	0xbe, 0x4d, 0xb8, 0xf4, 0x56, 0xc1, 0xf0, 0x09, 0x57, 0xce, 0x9c, 0x2b, 0x8f, 0x78, 0x08, 0xa6,
	0x9a, 0x48, 0x27, 0x1c, 0x32, 0xf4, 0x0c, 0x72, 0x23, 0x4a, 0x06, 0xca, 0x5f, 0x6c, 0x56, 0xed,
	0x44, 0x85, 0xca, 0x7f, 0x41, 0xc9, 0xc0, 0x55, 0x5e, 0xf4, 0x04, 0x0c, 0x11, 0xf3, 0x5a, 0xb6,
	0x6e, 0x34, 0x8a, 0x4d, 0xd3, 0x16, 0xb1, 0xdd, 0x8b, 0x5d, 0x72, 0xeb, 0xca, 0x5b, 0x59, 0xb7,
	0x88, 0x55, 0x06, 0x46, 0xdd, 0x68, 0x94, 0x5c, 0x6d, 0xe1, 0x17, 0x6b, 0x8d, 0xe5, 0x68, 0x1f,
	0xb2, 0x74, 0xae, 0x7f, 0xa8, 0xb4, 0xda, 0x54, 0x37, 0x4b, 0xe7, 0xcd, 0x1f, 0x1b, 0x90, 0xfb,
	0x10, 0x05, 0x1c, 0x7d, 0x04, 0xb3, 0x4d, 0x45, 0xd2, 0x56, 0x54, 0xb2, 0xa7, 0x91, 0x67, 0x6b,
	0xb1, 0x5a, 0x15, 0x65, 0x2d, 0x3a, 0x8e, 0x6b, 0xdf, 0x7e, 0xfe, 0xfa, 0x9e, 0x45, 0xb8, 0xec,
	0xcc, 0x5f, 0x39, 0x3e, 0x15, 0x49, 0xc3, 0x4f, 0x33, 0xc7, 0xa8, 0xa5, 0x1a, 0xd9, 0x8b, 0x13,
	0xdd, 0x6a, 0x8c, 0x96, 0xb0, 0xb5, 0x2c, 0x00, 0x5b, 0x8a, 0xb0, 0x83, 0xff, 0xd3, 0x04, 0x11,
	0xf7, 0xef, 0x64, 0xf2, 0x92, 0xd1, 0x83, 0x8a, 0x9c, 0xdb, 0x52, 0xfe, 0x68, 0x5b, 0x61, 0xd6,
	0x17, 0x42, 0x27, 0xb5, 0xe8, 0x28, 0x3e, 0x50, 0xc8, 0x3d, 0x8c, 0x34, 0x52, 0x75, 0x74, 0x49,
	0xfd, 0x02, 0x65, 0x7f, 0x41, 0xbd, 0x9c, 0x4d, 0x10, 0x5a, 0x85, 0x26, 0x3b, 0xf2, 0x80, 0xb9,
	0xaf, 0x98, 0xbb, 0x78, 0x6b, 0x9d, 0x19, 0xce, 0x26, 0x12, 0x79, 0x05, 0xb0, 0x14, 0x98, 0xe6,
	0xad, 0x2d, 0x8d, 0xf5, 0xf0, 0x8e, 0xe3, 0xff, 0x15, 0x73, 0x1b, 0x57, 0x52, 0x66, 0xe2, 0x92,
	0xc0, 0x36, 0x14, 0x52, 0x19, 0xa2, 0x6a, 0x1a, 0x9a, 0xae, 0x98, 0x75, 0xff, 0x86, 0xe3, 0x3d,
	0x85, 0xda, 0xc2, 0x25, 0x8d, 0xe2, 0xd2, 0x91, 0x80, 0xcc, 0x85, 0x54, 0x51, 0x59, 0xc5, 0xa5,
	0xbb, 0x68, 0x6d, 0x29, 0x73, 0x55, 0xc9, 0xeb, 0xf3, 0xe4, 0x34, 0x1c, 0x4c, 0xc9, 0xad, 0x88,
	0x25, 0xe8, 0x1c, 0x8a, 0xe7, 0x5c, 0x04, 0x13, 0x22, 0x68, 0x9b, 0xf0, 0xfb, 0xa8, 0x62, 0x92,
	0x91, 0x12, 0xfc, 0xfa, 0x48, 0xa9, 0x0e, 0xf2, 0x09, 0x97, 0x98, 0x4f, 0x60, 0x2e, 0x24, 0x89,
	0x74, 0x02, 0x2b, 0xbb, 0x6f, 0x3d, 0xb8, 0xba, 0x9f, 0x53, 0xea, 0x39, 0xcd, 0x1c, 0xbf, 0xcc,
	0xf4, 0xf3, 0xea, 0xef, 0xf4, 0xf5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x0f, 0xae, 0x2e,
	0x40, 0x06, 0x00, 0x00,
func (m *VoidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HashReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockByHashReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockByHashReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Complete {
		dAtA[i] = 0x10
		i++
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockByNumReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockByNumReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Num))
	}
	if m.Complete {
		dAtA[i] = 0x10
		i++
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetBalanceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBalanceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RawTxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawTxReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubscribeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		dAtA2 := make([]byte, len(m.Topics)*10)
		var j1 int
		for _, num := range m.Topics {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HeightRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeightRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetBalanceRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBalanceRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Balance != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Balance))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStateRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SendRawTxRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRawTxRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GasRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gas != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Gas))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Head != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Head.Size()))
		n3, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Txs) > 0 {
		for _, msg := range m.Txs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Txhash) > 0 {
		for _, b := range m.Txhash {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApis(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubscribeRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ev != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApis(dAtA, i, uint64(m.Ev.Size()))
		n4, err := m.Ev.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApis(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VoidReq) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HashReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockByHashReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.Complete {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockByNumReq) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovApis(uint64(m.Num))
	}
	if m.Complete {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBalanceReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RawTxReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Topics) > 0 {
		l = 0
		for _, e := range m.Topics {
			l += sovApis(uint64(e))
		}
		n += 1 + sovApis(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HeightRes) Size() (n int) {
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovApis(uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBalanceRes) Size() (n int) {
	var l int
	_ = l
	if m.Balance != 0 {
		n += 1 + sovApis(uint64(m.Balance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStateRes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendRawTxRes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GasRes) Size() (n int) {
	var l int
	_ = l
	if m.Gas != 0 {
		n += 1 + sovApis(uint64(m.Gas))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockInfo) Size() (n int) {
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApis(uint64(l))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovApis(uint64(l))
		}
	}
	if len(m.Txhash) > 0 {
		for _, b := range m.Txhash {
			l = len(b)
			n += 1 + l + sovApis(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeRes) Size() (n int) {
	var l int
	_ = l
	if m.Ev != nil {
		l = m.Ev.Size()
		n += 1 + l + sovApis(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApis(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApis(x uint64) (n int) {
	return sovApis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VoidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockByHashReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockByHashReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockByHashReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockByNumReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockByNumReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockByNumReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBalanceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBalanceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBalanceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawTxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawTxReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawTxReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v event.Event_Topic
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (event.Event_Topic(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Topics = append(m.Topics, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApis
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v event.Event_Topic
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (event.Event_Topic(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Topics = append(m.Topics, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeightRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeightRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeightRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBalanceRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBalanceRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBalanceRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStateRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRawTxRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRawTxRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRawTxRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			m.Gas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gas |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &block.BlockHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &tx.TxRaw{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txhash = append(m.Txhash, make([]byte, postIndex-iNdEx))
			copy(m.Txhash[len(m.Txhash)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ev", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ev == nil {
				m.Ev = &event.Event{}
			}
			if err := m.Ev.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApis
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApis
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApis(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApis = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApis   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc/apis.proto", fileDescriptor_apis_bcd10f17c591bbee) }

var fileDescriptor_apis_bcd10f17c591bbee = []byte{
	// 780 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcb, 0x6e, 0xf3, 0x44,
	0x14, 0xc7, 0x71, 0x9c, 0xa6, 0xf1, 0xc9, 0x85, 0x74, 0x5a, 0xb5, 0xc1, 0xb4, 0x69, 0x34, 0x65,
	0x11, 0x2a, 0x6a, 0x43, 0x58, 0x51, 0x09, 0x01, 0xa1, 0x55, 0x9a, 0x05, 0x2d, 0x38, 0x11, 0xfb,
	0x89, 0x33, 0x71, 0xac, 0x26, 0x1e, 0x37, 0x33, 0x49, 0xdd, 0x2d, 0xaf, 0xc0, 0x86, 0xd7, 0xe0,
	0x2d, 0x58, 0x22, 0xf1, 0x02, 0xa8, 0xf0, 0x20, 0x68, 0xc6, 0xe3, 0x5c, 0x5a, 0x54, 0xe9, 0xfb,
	0x36, 0xd6, 0x9c, 0x39, 0x73, 0x7e, 0x39, 0x97, 0xff, 0x09, 0x54, 0xe7, 0xb1, 0xef, 0x92, 0x38,
	0xe4, 0x4e, 0x3c, 0x67, 0x82, 0x21, 0x73, 0x1e, 0xfb, 0xf6, 0x57, 0x41, 0x28, 0x26, 0x8b, 0xa1,
	0xe3, 0xb3, 0x99, 0x1b, 0x32, 0x2e, 0x2e, 0xd8, 0x78, 0x1c, 0xfa, 0x21, 0x99, 0xba, 0x5d, 0x76,
	0xd1, 0xbb, 0xeb, 0x5f, 0xfc, 0x28, 0xdf, 0xfa, 0x6c, 0xea, 0xfa, 0x6c, 0x4e, 0x5d, 0x91, 0xb8,
	0x22, 0x49, 0xe3, 0xed, 0x6f, 0xde, 0x2d, 0x74, 0x38, 0x65, 0xfe, 0x7d, 0xfa, 0x7d, 0x3f, 0x00,
	0x5d, 0xd2, 0x48, 0xa4, 0x5f, 0x0d, 0x38, 0x0e, 0x18, 0x0b, 0xa6, 0x54, 0x16, 0xe5, 0x92, 0x28,
	0x62, 0x82, 0x88, 0x90, 0x45, 0xba, 0x3e, 0x6c, 0xc1, 0xee, 0xcf, 0x2c, 0x1c, 0x79, 0xf4, 0x01,
	0x9f, 0xc0, 0xee, 0x0d, 0xe1, 0x13, 0x8f, 0x3e, 0x20, 0x04, 0xf9, 0x09, 0xe1, 0x93, 0xba, 0xd1,
	0x34, 0x5a, 0x65, 0x4f, 0x9d, 0xf1, 0xb7, 0x50, 0xed, 0xc8, 0xbc, 0x3a, 0x4f, 0x6f, 0xbc, 0x42,
	0x36, 0x14, 0x7d, 0x36, 0x8b, 0xa7, 0x54, 0xd0, 0x7a, 0xae, 0x69, 0xb4, 0x8a, 0xde, 0xca, 0xc6,
	0x5f, 0x43, 0x45, 0x13, 0x6e, 0x17, 0x33, 0x09, 0xa8, 0x81, 0x19, 0x2d, 0x66, 0x2a, 0xde, 0xf4,
	0xe4, 0xf1, 0xcd, 0xf0, 0x53, 0xa8, 0x74, 0xa9, 0xe8, 0x90, 0x29, 0x89, 0x7c, 0x2a, 0xc3, 0xab,
	0x90, 0xeb, 0x5d, 0xa9, 0x68, 0xcb, 0xcb, 0xf5, 0xae, 0xf0, 0x29, 0x94, 0xba, 0x54, 0xf4, 0x05,
	0x11, 0x54, 0xd3, 0xef, 0xe9, 0x93, 0xf6, 0xcb, 0x23, 0x6e, 0x40, 0xd1, 0x23, 0x8f, 0x83, 0x44,
	0x27, 0x3f, 0x22, 0x82, 0x64, 0xc9, 0xcb, 0x33, 0xbe, 0x84, 0x72, 0x7f, 0x31, 0xe4, 0xfe, 0x3c,
	0x1c, 0x2a, 0xc2, 0x39, 0x14, 0x04, 0x8b, 0x43, 0x9f, 0xd7, 0x8d, 0xa6, 0xd9, 0xaa, 0xb6, 0x91,
	0x93, 0x36, 0xf6, 0x5a, 0x7d, 0x07, 0xd2, 0xe5, 0xe9, 0x17, 0xf8, 0x0c, 0xac, 0x1b, 0x1a, 0x06,
	0x13, 0xe1, 0x51, 0x8e, 0x0e, 0xa1, 0x30, 0x51, 0x86, 0xae, 0x4d, 0x5b, 0xf8, 0xd3, 0xed, 0x12,
	0x38, 0xaa, 0xc3, 0xee, 0x30, 0xb5, 0xf4, 0xcb, 0xcc, 0xc4, 0x67, 0x9b, 0xc5, 0x70, 0x74, 0x00,
	0x3b, 0x4b, 0x32, 0x5d, 0x50, 0x5d, 0x4e, 0x6a, 0x60, 0x0c, 0xe5, 0x3e, 0x8d, 0x46, 0xba, 0x28,
	0xfe, 0xbf, 0x73, 0xb3, 0xa1, 0xd0, 0x25, 0x5c, 0x7a, 0x6b, 0x60, 0x06, 0x84, 0x2b, 0x67, 0xde,
	0x93, 0x47, 0x3c, 0x06, 0x4b, 0x4d, 0xa4, 0x17, 0x8d, 0x19, 0xfa, 0x04, 0xf2, 0x13, 0x4a, 0x46,
	0xca, 0x5f, 0x6a, 0xd7, 0x9c, 0x54, 0x85, 0xca, 0x7f, 0x43, 0xc9, 0xc8, 0x53, 0x5e, 0xf4, 0x31,
	0x98, 0x22, 0xe1, 0xf5, 0x5c, 0xd3, 0x6c, 0x95, 0xda, 0x96, 0x23, 0x12, 0x67, 0x90, 0x78, 0xe4,
	0xd1, 0x93, 0xb7, 0xb2, 0x6e, 0x91, 0xa8, 0x0c, 0xcc, 0xa6, 0xd9, 0x2a, 0x7b, 0xda, 0xc2, 0x9f,
	0x6d, 0x35, 0x96, 0xa3, 0x63, 0xc8, 0xd1, 0xa5, 0xfe, 0xa1, 0xf2, 0x66, 0x53, 0xbd, 0x1c, 0x5d,
	0xb6, 0x7f, 0xdf, 0x81, 0xfc, 0x77, 0x71, 0xc8, 0xd1, 0xf7, 0x60, 0x75, 0xa9, 0x48, 0xdb, 0x8a,
	0xca, 0xce, 0x3c, 0xf6, 0x1d, 0x2d, 0x56, 0xbb, 0xaa, 0xac, 0x55, 0xc7, 0x71, 0xfd, 0x97, 0xbf,
	0xfe, 0xfd, 0x35, 0x87, 0x70, 0xc5, 0x5d, 0x7e, 0xe1, 0x06, 0x54, 0xa4, 0x0d, 0xbf, 0x34, 0xce,
	0x51, 0x47, 0x35, 0x72, 0x90, 0xa4, 0xba, 0xd5, 0x18, 0x2d, 0x61, 0x7b, 0x5d, 0x00, 0xb6, 0x15,
	0xe1, 0x00, 0x7f, 0xa8, 0x09, 0x22, 0x19, 0x3e, 0xc9, 0xe4, 0x25, 0x63, 0x00, 0x55, 0x39, 0xb7,
	0xb5, 0xfc, 0xd1, 0xbe, 0xc2, 0x6c, 0x2f, 0x84, 0x4e, 0x6a, 0xd5, 0x51, 0x7c, 0xa2, 0x90, 0x47,
	0x18, 0x69, 0xa4, 0xea, 0xe8, 0x9a, 0xfa, 0x13, 0x54, 0x82, 0x15, 0xf5, 0x76, 0x31, 0x43, 0x68,
	0x13, 0x9a, 0xee, 0xc8, 0x2b, 0xe6, 0xb1, 0x62, 0x1e, 0xe2, 0xbd, 0x6d, 0x66, 0xb4, 0x98, 0x49,
	0xe4, 0x1d, 0xc0, 0x5a, 0x60, 0x9a, 0xb7, 0xb5, 0x34, 0xf6, 0xeb, 0x3b, 0x8e, 0x3f, 0x52, 0xcc,
	0x7d, 0x5c, 0xcd, 0x98, 0xa9, 0x4b, 0x02, 0xbb, 0x50, 0xcc, 0x64, 0x88, 0x6a, 0x59, 0x68, 0xb6,
	0x62, 0xf6, 0xcb, 0x1b, 0x8e, 0x8f, 0x14, 0x6a, 0x0f, 0x97, 0x35, 0x8a, 0x4b, 0x47, 0x0a, 0xb2,
	0x56, 0x52, 0x45, 0x15, 0x15, 0x97, 0xed, 0xa2, 0xbd, 0xa7, 0xcc, 0x4d, 0x25, 0x6f, 0xcf, 0x93,
	0xd3, 0x68, 0x34, 0x27, 0x8f, 0x22, 0x91, 0xa0, 0x6b, 0x28, 0x5d, 0x73, 0x11, 0xce, 0x88, 0xa0,
	0x5d, 0xc2, 0x5f, 0xa2, 0x4a, 0x69, 0x46, 0x4a, 0xf0, 0xdb, 0x23, 0xa5, 0x3a, 0x28, 0x20, 0x5c,
	0x62, 0x7e, 0x00, 0x6b, 0x25, 0x49, 0xa4, 0x13, 0xd8, 0xd8, 0x7d, 0xfb, 0xd5, 0xd5, 0xcb, 0x9c,
	0x32, 0xcf, 0xa5, 0x71, 0xfe, 0xb9, 0xd1, 0xa9, 0xfd, 0xf1, 0xdc, 0x30, 0xfe, 0x7c, 0x6e, 0x18,
	0x7f, 0x3f, 0x37, 0x8c, 0xdf, 0xfe, 0x69, 0x7c, 0x30, 0x2c, 0xa8, 0x3f, 0xd8, 0x2f, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x61, 0x09, 0xe8, 0xab, 0x52, 0x06, 0x00, 0x00,
>>>>>>> develop
}
