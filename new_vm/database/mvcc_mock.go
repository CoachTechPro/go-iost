// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iost-official/Go-IOS-Protocol/new_vm/database (interfaces: IMultiValue)

// Package database is a generated GoMock package.
package database

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIMultiValue is a mock of IMultiValue interface
type MockIMultiValue struct {
	ctrl     *gomock.Controller
	recorder *MockIMultiValueMockRecorder
}

// MockIMultiValueMockRecorder is the mock recorder for MockIMultiValue
type MockIMultiValueMockRecorder struct {
	mock *MockIMultiValue
}

// NewMockIMultiValue creates a new mock instance
func NewMockIMultiValue(ctrl *gomock.Controller) *MockIMultiValue {
	mock := &MockIMultiValue{ctrl: ctrl}
	mock.recorder = &MockIMultiValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMultiValue) EXPECT() *MockIMultiValueMockRecorder {
	return m.recorder
}

// Checkout mocks base method
func (m *MockIMultiValue) Checkout(arg0 string) {
	m.ctrl.Call(m, "Checkout", arg0)
}

// Checkout indicates an expected call of Checkout
func (mr *MockIMultiValueMockRecorder) Checkout(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockIMultiValue)(nil).Checkout), arg0)
}

// Commit mocks base method
func (m *MockIMultiValue) Commit() string {
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(string)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockIMultiValueMockRecorder) Commit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockIMultiValue)(nil).Commit))
}

// Del mocks base method
func (m *MockIMultiValue) Del(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Del", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockIMultiValueMockRecorder) Del(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockIMultiValue)(nil).Del), arg0, arg1)
}

// Flush mocks base method
func (m *MockIMultiValue) Flush(arg0 string) error {
	ret := m.ctrl.Call(m, "Flush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockIMultiValueMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockIMultiValue)(nil).Flush), arg0)
}

// Fork mocks base method
func (m *MockIMultiValue) Fork(arg0 string) string {
	ret := m.ctrl.Call(m, "Fork", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Fork indicates an expected call of Fork
func (mr *MockIMultiValueMockRecorder) Fork(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fork", reflect.TypeOf((*MockIMultiValue)(nil).Fork), arg0)
}

// Get mocks base method
func (m *MockIMultiValue) Get(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIMultiValueMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIMultiValue)(nil).Get), arg0, arg1)
}

// Has mocks base method
func (m *MockIMultiValue) Has(arg0, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "Has", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has
func (mr *MockIMultiValueMockRecorder) Has(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockIMultiValue)(nil).Has), arg0, arg1)
}

// Keys mocks base method
func (m *MockIMultiValue) Keys(arg0, arg1 string) ([]string, error) {
	ret := m.ctrl.Call(m, "Keys", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys
func (mr *MockIMultiValueMockRecorder) Keys(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockIMultiValue)(nil).Keys), arg0, arg1)
}

// Put mocks base method
func (m *MockIMultiValue) Put(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockIMultiValueMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIMultiValue)(nil).Put), arg0, arg1, arg2)
}

// Rollback mocks base method
func (m *MockIMultiValue) Rollback() error {
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockIMultiValueMockRecorder) Rollback() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockIMultiValue)(nil).Rollback))
}

// Tables mocks base method
func (m *MockIMultiValue) Tables(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "Tables", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tables indicates an expected call of Tables
func (mr *MockIMultiValueMockRecorder) Tables(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tables", reflect.TypeOf((*MockIMultiValue)(nil).Tables), arg0)
}

// Tag mocks base method
func (m *MockIMultiValue) Tag(arg0 string) error {
	ret := m.ctrl.Call(m, "Tag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tag indicates an expected call of Tag
func (mr *MockIMultiValueMockRecorder) Tag(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockIMultiValue)(nil).Tag), arg0)
}
