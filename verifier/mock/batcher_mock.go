// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iost-official/go-iost/vm (interfaces: Batcher)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	block "github.com/iost-official/go-iost/core/block"
	tx "github.com/iost-official/go-iost/core/tx"
	vm "github.com/iost-official/go-iost/vm"
	database "github.com/iost-official/go-iost/vm/database"
	reflect "reflect"
	time "time"
)

// MockBatcher is a mock of Batcher interface
type MockBatcher struct {
	ctrl     *gomock.Controller
	recorder *MockBatcherMockRecorder
}

// MockBatcherMockRecorder is the mock recorder for MockBatcher
type MockBatcherMockRecorder struct {
	mock *MockBatcher
}

// NewMockBatcher creates a new mock instance
func NewMockBatcher(ctrl *gomock.Controller) *MockBatcher {
	mock := &MockBatcher{ctrl: ctrl}
	mock.recorder = &MockBatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatcher) EXPECT() *MockBatcherMockRecorder {
	return m.recorder
}

// Batch mocks base method
func (m *MockBatcher) Batch(arg0 *block.BlockHead, arg1 database.IMultiValue, arg2 vm.Provider, arg3 time.Duration, arg4 int) *vm.Batch {
	ret := m.ctrl.Call(m, "Batch", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*vm.Batch)
	return ret0
}

// Batch indicates an expected call of Batch
func (mr *MockBatcherMockRecorder) Batch(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockBatcher)(nil).Batch), arg0, arg1, arg2, arg3, arg4)
}

// Verify mocks base method
func (m *MockBatcher) Verify(arg0 *block.BlockHead, arg1 database.IMultiValue, arg2 func(vm.Engine, *tx.Tx, *tx.TxReceipt) error, arg3 *vm.Batch) error {
	ret := m.ctrl.Call(m, "Verify", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockBatcherMockRecorder) Verify(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockBatcher)(nil).Verify), arg0, arg1, arg2, arg3)
}
